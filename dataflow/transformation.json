{
	"name": "transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "datedim",
						"type": "DatasetReference"
					},
					"name": "datedim"
				},
				{
					"dataset": {
						"referenceName": "regiondim",
						"type": "DatasetReference"
					},
					"name": "regiondim"
				},
				{
					"dataset": {
						"referenceName": "weathermetrics",
						"type": "DatasetReference"
					},
					"name": "weathermetrics"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "datedimoutpute"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable3",
						"type": "DatasetReference"
					},
					"name": "weathermetricsoutpute"
				},
				{
					"dataset": {
						"referenceName": "regiondim",
						"type": "DatasetReference"
					},
					"name": "regiondimoutpute"
				}
			],
			"transformations": [
				{
					"name": "datedimcleand"
				},
				{
					"name": "regiondimclean"
				},
				{
					"name": "weathermetricsclean"
				},
				{
					"name": "surrogateKey1",
					"description": "Adding new key ID starting "
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DateID as string,",
				"          Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> datedim",
				"source(output(",
				"          RegionID as string,",
				"          RegionName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> regiondim",
				"source(output(",
				"          DateID as integer,",
				"          RegionID as integer,",
				"          AverageTemperature as integer,",
				"          Humidity as integer,",
				"          WindSpeed as integer,",
				"          Rainfall as integer,",
				"          SunshineHours as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> weathermetrics",
				"datedim cast(output(",
				"          DateID as integer,",
				"          Date as date",
				"     ),",
				"     errors: true) ~> datedimcleand",
				"regiondim cast(output(",
				"          RegionID as integer,",
				"          RegionName as string",
				"     ),",
				"     errors: true) ~> regiondimclean",
				"weathermetrics cast(output(",
				"          DateID as integer,",
				"          RegionID as integer,",
				"          AverageTemperature as integer,",
				"          Humidity as integer,",
				"          WindSpeed as integer,",
				"          Rainfall as integer,",
				"          SunshineHours as integer",
				"     ),",
				"     errors: true) ~> weathermetricsclean",
				"weathermetricsclean keyGenerate(output(ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"regiondimclean alterRow(upsertIf(1 == 1)) ~> alterRow1",
				"datedimcleand sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> datedimoutpute",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> weathermetricsoutpute",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RegionID as string,",
				"          RegionName as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> regiondimoutpute"
			]
		}
	}
}