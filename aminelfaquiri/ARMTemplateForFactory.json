{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "aminelfaquiri"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"datedim": {},
									"regiondim": {},
									"weathermetrics": {},
									"dateclean": {},
									"regiondimclean": {},
									"weathermetricsclean": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-19T15:40:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datacleaned')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dataclened"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "datedimClean",
						"container": "dataclean"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DateID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datedim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "datedim.csv",
						"container": "mydata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DateID",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/regiondim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "regiondim.csv",
						"container": "mydata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "RegionID",
						"type": "String"
					},
					{
						"name": "RegionName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/regiondimclean')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dataclened"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "regiondimclean",
						"container": "dataclean"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "RegionID",
						"type": "String"
					},
					{
						"name": "RegionName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weathermetrics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "weathermetrics.csv",
						"container": "mydata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DateID",
						"type": "String"
					},
					{
						"name": "RegionID",
						"type": "String"
					},
					{
						"name": "AverageTemperature",
						"type": "String"
					},
					{
						"name": "Humidity",
						"type": "String"
					},
					{
						"name": "WindSpeed",
						"type": "String"
					},
					{
						"name": "Rainfall",
						"type": "String"
					},
					{
						"name": "SunshineHours",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weathermetricsclean')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dataclened"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "weathermetricsclean",
						"container": "dataclean"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DateID",
						"type": "String"
					},
					{
						"name": "RegionID",
						"type": "String"
					},
					{
						"name": "AverageTemperature",
						"type": "String"
					},
					{
						"name": "Humidity",
						"type": "String"
					},
					{
						"name": "WindSpeed",
						"type": "String"
					},
					{
						"name": "Rainfall",
						"type": "String"
					},
					{
						"name": "SunshineHours",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/savetoDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datacleaned",
								"type": "DatasetReference"
							},
							"name": "dateclean"
						},
						{
							"dataset": {
								"referenceName": "regiondimclean",
								"type": "DatasetReference"
							},
							"name": "regiondimclean"
						},
						{
							"dataset": {
								"referenceName": "weathermetricsclean",
								"type": "DatasetReference"
							},
							"name": "weathermetricsclean"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datacleaned",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "regiondimclean",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "weathermetricsclean",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          DateID as string,",
						"          Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dateclean",
						"source(output(",
						"          RegionID as string,",
						"          RegionName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> regiondimclean",
						"source(output(",
						"          DateID as string,",
						"          RegionID as string,",
						"          AverageTemperature as string,",
						"          Humidity as string,",
						"          WindSpeed as string,",
						"          Rainfall as string,",
						"          SunshineHours as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> weathermetricsclean",
						"dateclean sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as string,",
						"          Date as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"regiondimclean sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RegionID as string,",
						"          RegionName as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"weathermetricsclean sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as string,",
						"          RegionID as string,",
						"          AverageTemperature as string,",
						"          Humidity as string,",
						"          WindSpeed as string,",
						"          Rainfall as string,",
						"          SunshineHours as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datacleaned')]",
				"[concat(variables('factoryId'), '/datasets/regiondimclean')]",
				"[concat(variables('factoryId'), '/datasets/weathermetricsclean')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datedim",
								"type": "DatasetReference"
							},
							"name": "datedim"
						},
						{
							"dataset": {
								"referenceName": "regiondim",
								"type": "DatasetReference"
							},
							"name": "regiondim"
						},
						{
							"dataset": {
								"referenceName": "weathermetrics",
								"type": "DatasetReference"
							},
							"name": "weathermetrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datacleaned",
								"type": "DatasetReference"
							},
							"name": "dateclean"
						},
						{
							"dataset": {
								"referenceName": "regiondimclean",
								"type": "DatasetReference"
							},
							"name": "regiondimclean"
						},
						{
							"dataset": {
								"referenceName": "weathermetricsclean",
								"type": "DatasetReference"
							},
							"name": "weathermetricsclean"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          DateID as string,",
						"          Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datedim",
						"source(output(",
						"          RegionID as integer,",
						"          RegionName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> regiondim",
						"source(output(",
						"          DateID as integer,",
						"          RegionID as integer,",
						"          AverageTemperature as integer,",
						"          Humidity as integer,",
						"          WindSpeed as integer,",
						"          Rainfall as integer,",
						"          SunshineHours as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> weathermetrics",
						"datedim sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as string,",
						"          Date as string",
						"     ),",
						"     partitionFileNames:['datedimClean'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> dateclean",
						"regiondim sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RegionID as string,",
						"          RegionName as string",
						"     ),",
						"     partitionFileNames:['regiondimclean'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> regiondimclean",
						"weathermetrics sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as string,",
						"          RegionID as string,",
						"          AverageTemperature as string,",
						"          Humidity as string,",
						"          WindSpeed as string,",
						"          Rainfall as string,",
						"          SunshineHours as string",
						"     ),",
						"     partitionFileNames:['weathermetricsclean'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> weathermetricsclean"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datedim')]",
				"[concat(variables('factoryId'), '/datasets/regiondim')]",
				"[concat(variables('factoryId'), '/datasets/weathermetrics')]",
				"[concat(variables('factoryId'), '/datasets/datacleaned')]",
				"[concat(variables('factoryId'), '/datasets/regiondimclean')]",
				"[concat(variables('factoryId'), '/datasets/weathermetricsclean')]"
			]
		}
	]
}